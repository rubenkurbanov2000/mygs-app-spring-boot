package cz.cvut.fel.mygs.modelsimport com.fasterxml.jackson.annotation.JsonManagedReferenceimport com.fasterxml.jackson.annotation.JsonPropertyimport javax.persistence.*import java.io.Serializable@Entity@Table(name = "`gas_station`")class GasStation(    @Id    @Column(unique = true)    @GeneratedValue(strategy = GenerationType.AUTO)    var id: Long = 0,    @Column    var name: String = "",    @Column(name = "rating")    var rating: Double = 0.0,    @Column(length = 65000)    var servicesListString: String = "",    @Column(length = 65000)    var paymentMethodsListString: String = "",//    address ----------------    @Column    var atitude: Double = 0.0,    @Column    var longtitude: Double = 0.0,    @Column    @JsonProperty("building_number")    var buildingNumber: String = "",    @Column    var city: String = "",    @Column    var street: String = "",    @Column(name = "zip_code")    @JsonProperty("zip_code")    var zipCode: Int = 0,    @ManyToOne(optional = false)    @JoinColumn(name = "manager_id", referencedColumnName = "id")    var manager: User? = null,    @OneToMany(mappedBy = "gasStation", targetEntity = Schedule::class)    var schedules: Collection<Schedule>? = null): Serializable {    fun getAddres():String{        return "${this.street} ${this.buildingNumber}, ${this.city}"    }    @OneToMany(mappedBy = "belongsGs", targetEntity = Feedback::class)    private var feedbacks: Collection<Feedback>? = null    @OneToMany(mappedBy = "gasStation", targetEntity = Order::class)    private var orders: Collection<Order>? = null    @OneToMany(mappedBy = "gasStation", targetEntity = Offer::class)    private var offers: Collection<Offer>? = null    @OneToMany(mappedBy = "gasStation", targetEntity = Fuel::class)    private var fuelsPrice: Collection<Fuel>? = null    @OneToMany(mappedBy = "gasStation", targetEntity = RefuelingStand::class)    private var refuelingStands: Collection<RefuelingStand>? = null    @ManyToMany(mappedBy = "favorite", cascade = [CascadeType.PERSIST], fetch = FetchType.LAZY)    var likedUsers: MutableList<User> = mutableListOf()    fun getServices():List<Int>{        return servicesListString.map { it.toString().toInt() }    }    fun getPaymentMethods():List<Int>{        return paymentMethodsListString.map { it.toString().toInt() }    }}enum class Service {    WIFI, CARWASHING, VACUUM, ATM, MARKET, HANDICAPPED,PARKING, WC}enum class PaymentMethod {   CASHLESS, CASH, CONTACTLESS}